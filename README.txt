Repository for activity recognition modules in City4Age.

CONTENTS:

The following Python modules can be found here:

log_reader: classes to read and represent the information provided by the log-file of Activity Discovery (CASAS). An example of such a log-file can be found at test_files/test_dataset_log.txt. Class LogReader.py can be used to read those files and obtain clusters and patterns.

AD_pattern_filtering: a class to filter spurious patterns detected by AD using the information from the log-file. ADPatternFiltering uses LogReader to read the log and implements various filtering strategies.

pattern_model_matching: the main module of the repository, where the matching between patterns extracted by AD and Expert Activity Models is done. A class ExpertActivityModel is provided to represent those. Class PatternModelMatching loads EAMs, the patterns detected by AD, the log-file by AD and the context model (where sensors and actions are defined) to produce a new CSV file where all patterns are annotated with activities.

ar_evaluator: this module is prepared to evaluate the results obtained by PatternModelMatching. It produces a confusion matrix with all target activities. A class ConfusionMatrix is provided to build, update and visualize confusion matrices. However, the confusion matrix provided by scikit-learn is to be implemented.

test_files: the files needed for the execution of the modules, as well as their results:
   - context_model.json: definition of sensors, actions and their relationships.
   - eams.json: definition of Expert Activity Models.
   - groundtruth.csv: the groundtruth for evaluation, directly generated by synthetic_dataset_generator.
   - pm_output.csv: the file generated by PatternModelMatching (to be evaluated).
   - test_dataset.csv.annotated: the file generated by AD detecting the patterns in a modified groundtruth.csv (all activities are tagged as Other_Activity to make AD find patterns).
   - test_dataset_log.txt: the log-file generated by AD for the modified groundtruth.csv in the generation process of test_dataset.csv.annotated.
   
USAGE:

To run the PatternModelMatching with suitable files, just type (this assumes AD has been run on the action dataset):

python PatternModelMatching.py -e ../test_files/eams.json -a test_files/test_dataset.csv.annotated -l ../test_files/test_dataset_log.txt -c ../test_files/context_model.json -o ../test_files/pm_output.csv

To run AREvaluator and evaluate results obtained by PatternModelMatching, just type (this assumes PatternModelMatching has been run):

python AREvaluator.py -g ../test_files/groundtruth.csv -e ../test_files/pm_output.csv
