# -*- coding: utf-8 -*-
"""
Created on Fri Apr 29 14:12:28 2016

@author: gazkune
"""

"""
A class to filter the patterns detected by AD 
"""

import sys, getopt
from copy import deepcopy
from log_reader.Pattern import Pattern
from log_reader.Cluster import Cluster
from log_reader.LogReader import LogReader
import numpy as np


class ADPatternFilter:
    
    # Constructor
    def __init__(self, logfile):
        # Create an instance of LogReader
        self.log = LogReader(logfile)
        self.removedPatterns = []
        self.defPatternlist = []
        
    def filterPatterns(self):        
        # Parse the logfile and obtain the list of patterns and clusters
        self.log.parseLog()
        #self.removePatterns1()
        #self.removePatterns2()
        
    # This method implements the strategy 1 to remove patterns
    # Take into account only the number of instances for removing purposes
    def removePatterns1(self):
        perc = 0.10
        threshold = self.log.minInstances + (self.log.maxInstances - self.log.minInstances)*perc
        print 'Used threshold value for instances:', threshold
        for pattern in self.log.patternlist:
            if pattern.instances < threshold:
                self.removedPatterns.append(pattern)
            else:
                self.defPatternlist.append(pattern)
                
    # This method implements the strategy 2 to remove patterns
    # Take into account only the pattern value for removing purposes
    def removePatterns2(self):
        perc = 0.10
        threshold = self.log.minPatternValue + (self.log.maxPatternValue - self.log.minPatternValue)*perc
        print 'Used threshold value for pattern values:', threshold
        for pattern in self.log.patternlist:
            if pattern.value < threshold:
                self.removedPatterns.append(pattern)
            else:
                self.defPatternlist.append(pattern)
                
    # This method implements the strategy 3 to remove patterns
    # Take into account only the instances for removing purposes
    # but calculate the threshold using the IQR (Interquartile range)
    def removePatterns3(self):
        instances = []
        for pattern in self.log.patternlist:
            instances.append(pattern.instances)
            
        iqr = np.subtract(*np.percentile(instances, [75, 25]))
        threshold = self.log.minInstances + iqr
        print 'Used threshold value for instances:', threshold, 'iqr:', iqr
        for pattern in self.log.patternlist:
            if pattern.instances < threshold:
                self.removedPatterns.append(pattern)
            else:
                self.defPatternlist.append(pattern)
                
    # This method implements the strategy 3 to remove patterns
    # Take into account only the instances for removing purposes
    # but calculate the threshold using the IQR (Interquartile range)
    def removePatterns4(self):
        values = []
        for pattern in self.log.patternlist:
            values.append(pattern.value)
            
        iqr = np.subtract(*np.percentile(values, [75, 25]))
        threshold = self.log.minPatternValue + iqr
        print 'Used threshold value for pattern values:', threshold, 'iqr:', iqr
        for pattern in self.log.patternlist:
            if pattern.value < threshold:
                self.removedPatterns.append(pattern)
            else:
                self.defPatternlist.append(pattern)
    
    #Method to reset the internal lists    
    def reset(self):
        self.removedPatterns = []
        self.defPatternlist = []
            
        
######################################################################################
        
"""
Function to parse arguments from command line
Input:
    argv -> command line arguments
Output:
    inputfile -> log file generated by AD (custom format)

"""

def parseArgs(argv):
   inputfile = ''
   
   try:
      opts, args = getopt.getopt(argv,"hi:",["ifile="])
   except getopt.GetoptError:
      print 'ADPatternFilter.py -i <inputfile>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print 'ADPatternFilter.py -i <inputfile>'
         sys.exit()
      elif opt in ("-i", "--ifile"):
         inputfile = arg
         
   return inputfile
  
"""
Main function
"""
def main(argv):
    # call the argument parser 
   inputfile_name = parseArgs(argv[1:])
   print 'Provided arguments:'       
   print inputfile_name
   
   patternfilter = ADPatternFilter(inputfile_name)
   
   # parse the file for patterns and clusters
   patternfilter.filterPatterns()
   
   """
   for pattern in patternfilter.removedPatterns:
       pattern.printPattern()
   """
   """
   for pattern in patternfilter.defPatternlist:
       pattern.printPattern()
   """
   patternfilter.removePatterns1()
   print len(patternfilter.removedPatterns)
   
   patternfilter.reset()
   
   patternfilter.removePatterns2()
   print len(patternfilter.removedPatterns)
   
   patternfilter.reset()
   
   patternfilter.removePatterns3()
   print len(patternfilter.removedPatterns)
   
   patternfilter.reset()
   
   patternfilter.removePatterns4()
   print len(patternfilter.removedPatterns)
   
if __name__ == "__main__":
   main(sys.argv)