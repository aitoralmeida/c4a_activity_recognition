# -*- coding: utf-8 -*-
"""
Created on Wed Apr 27 11:38:42 2016

@author: gazkune
"""

"""
This tool is to read and structure the log generated by AD tool
from CASAS
"""

import sys, getopt
from copy import deepcopy
import os.path

from Pattern import Pattern
from Cluster import Cluster


class LogReader:
    
    def __init__(self, logfile):
        """ Constructor
        
        Usage example:
            logreader = LogReader(inputfile_name)
            
        Parameters
        ----------
        inputfile_name : string
            the name of a text file generated as a log of the AD tool        
            
        Returns
        ----------
        Instance of the class
        
        """
        self.logfile = open(logfile, 'r')
        self.filename = logfile
        self.patternlist = []
        self.clusterlist = []
        self.maxPatternValue = 0
        self.minPatternValue = sys.maxint
        self.maxInstances = 0
        self.minInstances = sys.maxint        
        
    
    def __del__(self):
        """ Destructor
        """
        self.logfile.close()
        
    # Method to parse the log file calling to parse_patterns and parse_clusters
    def parse_log(self):
        """ Method to parse the log file calling to parse_patterns and parse_clusters
                    
        Usage example:
            parse_log()
                
        Parameters
        ----------
        None
                
        Returns
        -------
        None
        
        """
        
        self.parse_patterns()
        self.parse_clusters()        
        
        
    def parse_patterns(self):
        """ Method to parse de patterns from the logfile
                    
        Usage example:
            parse_patterns()
                
        Parameters
        ----------
        None
                
        Returns
        -------
        None
        
        """
        
        # Bring the cursor to the beginning
        self.logfile.seek(0)
        # define some position variables for file parsing    
        valuepos = 3
        numpos = 2
        instpos = 8
        actionpos = 5
        # Auxiliar instance for a pattern
        pattern = Pattern()
       
        for line in self.logfile:      
            if line.find('------- Iteration') != -1:                
                elems = line.split(' ')
                if pattern.number != -1:
                    pattern.print_pattern()
                    self.patternlist.append(deepcopy(pattern))
                    #print 'Pattern added to patternlist'
                pattern.reset()            
                pattern.set_number(int(elems[numpos].strip(',')))
                #print 'Iteration ', pattern.number
                       
            if line.find('Pattern:') != -1:
                #print 'Pattern found!'
                elems = line.split(' ')
                pattern.set_value(float(elems[valuepos].strip(',')))
                # Update maxPatternValue and minPatternValue if needed
                if pattern.value > self.maxPatternValue:
                    self.maxPatternValue = pattern.value
                if pattern.value < self.minPatternValue:
                    self.minPatternValue = pattern.value
                       
                pattern.set_instances(int(elems[instpos]))
                # Update maxInstances and minInstances if needed
                if pattern.instances > self.maxInstances:
                    self.maxInstances = pattern.instances
                if pattern.instances < self.minInstances:
                    self.minInstances = pattern.instances
                       
                #print '  value:', pattern.value
                #print '  instances:', pattern.instances
                      
            if line.find('event (') != -1:
                elems = line.split(' ')
                # Unfold any pattern that may be inside this one
                if elems[actionpos].find('Pat_') != -1:
                    #print 'action: ', elems[actionpos]
                    # There is a pattern instead of an action
                    newelems = elems[actionpos].split('_')
                    pattindex = int(newelems[1])
                    #print 'pattern index:', pattindex
                    #patternlist[pattindex].print_pattern()
                    #actions = patternlist[pattindex].actions
                    #print actions
    
                    for action in self.patternlist[pattindex].actions:
                        #print action
                        pattern.append_action(action)
                        
                else:
                    pattern.append_action(elems[actionpos])
                    #print '  action:', elems[actionpos]
                         
            if line.find('No more compression can be achieved.') != -1:
                #print 'Exit loop!'          
                break
             
    
    def parse_clusters(self):
        """ Method to parse the clusters from the logfile
                    
        Usage example:
            parse_clusters()
                
        Parameters
        ----------
        None
                
        Returns
        -------
        None
        
        """
        if len(self.patternlist) == 0:
            print 'Pattern have to be parsed before clusters'
            return
        # Bring the cursor to the beginning
        self.logfile.seek(0)
    
        # Auxiliar cluster
        cluster = Cluster()
            
        for line in self.logfile:
            elems = []
            elems = line.split(' ')
            if elems[0] == 'Cluster':
                if cluster.number != -1:
                    self.clusterlist.append(deepcopy(cluster))
                    cluster.reset()
                cluster.set_number(int(elems[1]))
                #print 'Cluster', cluster.number
        
            if line.find('[') != -1 and line.find(']') != -1 and line.find('event') == -1:
                # We have a line of patterns
                elems = line.split('[')
                newelems = elems[1].split(']')
                pattindex = int(newelems[0])
                cluster.add_pattern(self.patternlist[pattindex])
                #print '  ', pattindex

########################################################################################################################          
 
def parse_args(argv):
    """ Function to parse arguments from command line
                    
    Usage example:            
        inputfile = parse_args(argv[1:])
                
    Parameters
    ----------
    argv : list
        the arguments to be parsed as passed to the function
                        
    Returns
    -------
    inputfile : string
        the name of the log file generated by AD (custom format)
        
    """    
    inputfile = ''
   
    try:
        opts, args = getopt.getopt(argv,"hi:",["ifile="])
    except getopt.GetoptError:
        print 'log_reader.py -i <inputfile>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'log_reader.py -i <inputfile>'
            sys.exit()
        elif opt in ("-i", "--ifile"):
            inputfile = arg
         
    return inputfile
  
"""
Main function
"""
def main(argv):
    """ Main
            
    Usage example:
        main(argv)
            
    Parameters
    ----------
    argv : list
        the arguments to be parsed as passed to the function
                
    Returns
    -------
    None
        
    """
    # call the argument parser 
    inputfile_name = parse_args(argv[1:])
    print 'Provided arguments:'       
    print inputfile_name
   
    logreader = LogReader(inputfile_name)
   
    # parse the file for patterns and clusters
    logreader.parse_log()
   
   
    """
    # Print parsed patterns
    for pattern in logreader.patternlist:
       pattern.print_pattern()
    """   
    # Print parsed clusters
    for cluster in logreader.clusterlist:
        cluster.print_cluster()
       
    # Print max and min values for pattern value and instances
    print 'Max pattern value', logreader.maxPatternValue
    print 'Min pattern value', logreader.minPatternValue
    print 'Max instances', logreader.maxInstances
    print 'Min instances', logreader.minInstances
   
   
if __name__ == "__main__":
   main(sys.argv)