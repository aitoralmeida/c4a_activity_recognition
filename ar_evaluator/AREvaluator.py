# -*- coding: utf-8 -*-
"""
Created on Fri May 20 13:38:25 2016

@author: gazkune
"""

import sys, getopt
import numpy as np
import pandas as pd
import json
import itertools
import time, datetime
from ConfusionMatrix import ConfusionMatrix

class AREvaluator:
    
    def __init__(self, groundtruth, evaluable):        
        self.groundtruth = pd.read_csv(groundtruth, parse_dates=[[0, 1]], header=None, index_col=0, sep=' ')
        self.groundtruth.columns = ['sensor', 'action', 'event', 'activity']
        self.groundtruth.index.names = ["timestamp"]
        
        self.evaluable = pd.read_csv(evaluable, index_col=0)

        # List of activities in the groundtruth dataset        
        self.activities = self.groundtruth.activity.unique()
        # Initialize the confusion matrix
        self.cm = ConfusionMatrix(self.activities)
        
        
    # First evaluation method. 
    # The idea is to take the patterns in evaluable, take the start and end time of the pattern
    # and look at the same time section of the groundtruth file. Extract the activities of the groundtruth
    # for that section and compare with the activities of evaluable. The objetive is to create a confusion
    # matrix.
    def evaluate1(self):
        None
        

########################################################################################################################          
 
"""
Function to parse arguments from command line
Input:
    argv -> command line arguments
Output:
    inputfile -> log file generated by AD (custom format)

"""

def parseArgs(argv):
   groundtruth = ''
   evaluable = ''
      
   try:
      opts, args = getopt.getopt(argv,"hg:e:",["gfile=", "efile="])
   except getopt.GetoptError:
      print 'AREvaluator.py -g <groundtruth> -e <evaluable>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print 'AREvaluator.py -g <groundtruth> -e <evaluable>'
         sys.exit()
      elif opt in ("-g", "--gfile"):
         groundtruth = arg
      elif opt in ("-e", "--efile"):
         evaluable = arg
      
         
   return groundtruth, evaluable
  
"""
Main function
"""
def main(argv):
    # call the argument parser 
   [groundtruth, evaluable] = parseArgs(argv[1:])
   print 'Provided arguments:'       
   print groundtruth, evaluable
   
   evaluator = AREvaluator(groundtruth, evaluable)
   print evaluator.groundtruth.head(10)
   print '-------------------------------------------'
   print evaluator.evaluable.head(10)
   
   
   
if __name__ == "__main__":
   main(sys.argv)